1)
mkdir lab11; cd lab11
touch prog1.sh; chmod +x prog1.sh
gedit prog1.sh

#! /bin/bash
while getopts i:o:p:cn optletter
do
case $optletter in
i) iflag=1; ival=$OPTARG;;
o) oflag=1; oval=$OPTARG;;
p) pflag=1; pval=$OPTARG;;
c) cflag=1;;
n) nflag=1;;
*) echo Illegal option $optletter;;
esac
done
if ! test $cflag
then
cf=-i
fi
if test $nflag
then
nf=-n
fi
grep $cf $nf $pval $ival >> $oval

bash prog1.sh -p И -i lab11.txt -o output.txt -c -n

2)
gedit progC.c

#include <stdlib.h>
#include <stdio.h>

int main() {
	int n;
	printf("Введите число: ");
	scanf("%d", &n);
	if(n==0) {
		exit(0);
	}
	else if(n>0) {
		exit(1);
	}
	else {
		exit(2);
	}
}

gedit prog2.sh

#!/bin/bash

gcc -o cpog progC.c
./cprog
case $? in
	0) echo "Число == 0";;
	1) echo "Число > 0";;
	2) echo "Число < 0";;
esac

bash prog2.sh 15
bash prog2.sh

3)
gedit prog3.sh

#!/bin/bash
for((i=1; i<=$*; i++))
do
if test -f "$i".tmp
then rm "$i".tmp
else touch "$i.tmp"
fi
done

bash prog3.sh 3; ls

4)
gedit prog4.sh

#! /bin/bash
find $* -mtime -7 -mtime +0 -type f > FILES.txt
tar -cf archive.tar -T FILES.txt

pwd; bash prog4.sh
(новая консоль: cd lab11; nautilus .)

ВОПРОСЫ:
1)
Осуществляет синтаксический анализ командной строки, выделяя флаги, и используется для объявления переменных. Синтаксис команды следующий: getopts option-string variable [arg … ] Флаги – это опции командной строки, обычно помеченные знаком минус; Например, -F является флагом для команды ls -F. Иногда эти флаги имеют аргументы, связанные с ними. Программы интерпретируют эти флаги, соответствующим образом изменяя свое поведение. Строка опций option-string — это список возможных букв и чисел соответствующего флага. Если ожидается, что некоторый флаг будет сопровождаться некоторым аргументом, то за этой буквой должно следовать двоеточие.

2)
При перечислении имён файлов текущего каталога можно использовать следующие символы: − соответствует произвольной, в том числе и пустой строке; "?" − соответствует любому одинарному символу; "[c1-c2]" − соответствует любому символу, лексикографически находящемуся между символами с1 и с2. Например, "echo *" выведет имена всех файлов текущего каталога, что представляет собой простейший аналог команды ls; "ls .c" − выведет все файлы с последними двумя символами, совпадающими с ".c". "echo prog.?" − выведет все файлы, состоящие из пяти или шести символов, первыми пятью символами которых являются prog. "[a-z]" − соответствует произвольному имени файла в текущем каталоге, начинающемуся с любой строчной буквы латинского алфавита.

3)
Часто бывает необходимо обеспечить проведение каких-либо действий циклически и управление дальнейшими действиями в зависимости отрезультатов проверки некоторого условия. Для решения подобных задач язык программирования bash предоставляет возможность использовать такие управляющие конструкции, как for, case, if и while. С точки зрения командного процессора эти управляю- щие конструкции являются обычными командами и могут использоваться как при создании командных файлов, так и при работе в интерактивном режиме. Команды, реализующие подобные конструкции, по сути, являются операторами языка программирования bash. Поэтому при описании языка программирова- ния bash термин оператор будет использоваться наравне с термином команда.

4)
Два несложных способа позволяют вам прерывать циклы в оболочке bash. Команда break завершает выполнение цикла, а команда continue завершает данную итерацию блока операторов. Команда break полезна для завершения цикла while в ситуациях, когда условие перестаёт быть правильным. Команда continue исполь- зуется в ситуациях, когда больше нет необходимости выполнять блок операторов, но вы можете захотеть продолжить проверять данный блок на других условных выражениях.

5)
Следующие две команды ОС UNIX используются только совместно с управляющими конструкциями языка программирования bash: это команда true, которая всегда возвращает код завершения, == 0 (истина), и команда false, которая всегда возвращает код завершения, != 0 (ложь).

6)
Строка "if test -f man$s/$i.$s" проверяет является ли этот "объект" обычным файлом, если же данный файл является каталогом, то команда вернет нулевое значение (ложь).

7)
Выполнение оператора цикла while сводится к тому, что сначала выполняется последовательность команд (операторов), которую задаёт "список-команд" в строке, содержащей служебное слово while, а затем, если последняя выполненная команда из этой последовательности возвращает нулевой код завершения цикл (истина), выполняется последовательность команд (операторов), которую задаёт список-команд в строке, содержащей служебное слово do, после чего осуществляется безусловный переход на начало оператора цикла while. Выход из цикла будет осуществлён тогда, когда сделуя всей цепочке команд возвратит ненулевой код завершения (ложь).
При замене в операторе цикла while служебного слова while на until условие, при выполнении которого осуществляется выход из цикла, меняется на противоположное. В остальном оператор цикла while и оператор цикла until идентичны.